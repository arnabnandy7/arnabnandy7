name: "Refresh Weather"
on:
  schedule:
    - cron: '30 * * * *'
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true


jobs:
  update-weather:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Generate README
        uses: huantt/weather-forecast@v1.0.6
        with:
          city: 22.5744,88.3629
          days: 3
          weather-api-key: ${{ secrets.WEATHER_API_KEY }}
          template-file: 'README.md.template'
          out-file: 'README.md'
          
      - name: Install jq
        run: sudo apt-get install jq

      # Extract reason from the API response and update README
      - name: Update Weather
        run: |
          TEXT=$(jq -r '.current.condition.text' tmp/current_weather_response.json)
          ICON=$(jq -r '.current.condition.icon' tmp/current_weather_response.json)
          COND_ID=$(jq -r '.current.condition.code' tmp/current_weather_response.json)
          
          BNG_DAY_TEXT=$(jq -r --argjson id "$COND_ID" '.[] | select(.code == $id).day_text' tmp/condition.json)
          BNG_NIT_TEXT=$(jq -r --argjson id "$COND_ID" '.[] | select(.code == $id).night_text' tmp/condition.json)
          
          ISDAY=$(jq -r '.current.is_day' tmp/current_weather_response.json)

          AQI=$(jq -r '.current.air_quality["us-epa-index"]' tmp/forecast_response.json)
          PM2_5=$(jq -r '.current.air_quality.pm2_5' tmp/forecast_response.json)
          PM10=$(jq -r '.current.air_quality.pm10' tmp/forecast_response.json)
          
          echo $TEXT $ICON $BNG_DAY_TEXT $BNG_NIT_TEXT $ISDAY
          sed -i "s#\[icon\]#$ICON#g" README.md
          sed -i "s#\[todays_condition\]#$TEXT#g" README.md
          if [ "$ISDAY" -eq "1" ]; then
              sed -i "s#\[todays_condition_in_bengali\]#$BNG_DAY_TEXT#g" README.md
          else
              sed -i "s#\[todays_condition_in_bengali\]#$BNG_NIT_TEXT#g" README.md
          fi
          sed -i "s#\[PM2_5\]#$PM2_5#g" README.md
          sed -i "s#\[PM10\]#$PM10#g" README.md

          case "$AQI" in
            1)
              AQI_VALUE="Good"
              ;;
            2)
              AQI_VALUE="Moderate"
              ;;
            3)
              AQI_VALUE="Unhealthy for sensitive group"
              ;;
            4)
              AQI_VALUE="Unhealthy"
              ;;
            5)
              AQI_VALUE="Very Unhealthy"
              ;;
            6)
              AQI_VALUE="Hazardous"
              ;;
            *)
              AQI_VALUE="Unknown"
              ;;
          esac
          sed -i "s#\[aqi\]#$AQI_VALUE#g" README.md

          HOURLY_TABLE=$(jq -r '
            .forecast.forecastday[].hour
            | (["Time","Condition","Temp (°C)","Feels (°C)","Humidity (%)","Wind (kph)","Rain (%)"]),
              (.[] | [
                  .time,
                  (.condition.text + " ![](http:" + .condition.icon + ")"),
                  .temp_c,
                  .feelslike_c,
                  .humidity,
                  .wind_kph,
                  .chance_of_rain
                ])
            | @tsv
          ' tmp/forecast_response.json)
          HOURLY_MD=$(echo "$HOURLY_TABLE" | sed 's/\t/ | /g; s/^/| /; s/$/ |/' )
          HEADER=$(echo "$HOURLY_MD" | head -n1)
          SEPARATOR=$(echo "$HEADER" | sed 's/[^|][^|]*/---/g')
          HOURLY_MD=$(echo -e "$HEADER\n$SEPARATOR\n$(echo "$HOURLY_MD" | tail -n +2)")
          
          sed -i "s#\[hourly_forecast_table\]#${HOURLY_MD//$'\n'/\\n}#g" README.md
        
      # Fetch data from your API
      - name: Fetch API data
        run: |
          curl -X GET https://naas.isalman.dev/no -o tmp/humour_response.json
          
      # Extract reason from the API response and update README
      - name: Update README with API reason
        run: |
          REASON=$(jq -r '.reason' tmp/humour_response.json)
          echo $REASON
          sed -i "s/\[funny_no_statement\]/$REASON/g" README.md
          
      - name: Get current year
        id: current_year
        run: echo "year=$(date +'%Y')" >> $GITHUB_ENV

      - name: Update README with current year
        run: |
          sed -i "s/\[current_year_placeholder\]/${{ env.year }}/g" README.md
          
      - name: Commit
        run: |
            if git diff --exit-code; then
              echo "No changes to commit."
              exit 0
            else
              git config user.name arnabnandy7
              git config user.email arnab_nandy7@yahoo.com
              git add .
              git commit -m "update"
              git push origin main
            fi
