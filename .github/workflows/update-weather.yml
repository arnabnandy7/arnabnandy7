name: "Refresh Weather"
on:
  schedule:
    - cron: '30 * * * *'
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true


jobs:
  update-weather:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Generate README
        uses: huantt/weather-forecast@v1.0.6
        with:
          city: 22.5744,88.3629
          days: 3
          weather-api-key: ${{ secrets.WEATHER_API_KEY }}
          template-file: 'README.md.template'
          out-file: 'README.md'
          
      - name: Install jq
        run: sudo apt-get install jq

      # Extract reason from the API response and update README
      - name: Update Weather
        run: |

          # Get current epoch time (in seconds)
          NOW_EPOCH=$(date +%s)

          # Extract the next forecast hour (time_epoch > NOW)
          NEXT_FORECAST=$(jq -c --argjson now "$NOW" \
            '.forecast.forecastday[0].hour[] 
             | select(.time_epoch > $now) 
             | . 
             | first' tmp/forecast_response.json)

          NEXT_COND=$(echo "$NEXT_FORECAST" | jq -r '.condition.text')
          TEXT=$(echo "$NEXT_FORECAST" | jq -r '.condition.text')
          ICON=$(echo "$NEXT_FORECAST" | jq -r '.condition.icon')
          COND_ID=$(echo "$NEXT_FORECAST" | jq -r '.condition.code')
          
          BNG_DAY_TEXT=$(jq -r --argjson id "$COND_ID" '.[] | select(.code == $id).day_text' tmp/condition.json)
          BNG_NIT_TEXT=$(jq -r --argjson id "$COND_ID" '.[] | select(.code == $id).night_text' tmp/condition.json)
          
          ISDAY=$(jq -r '.current.is_day' tmp/current_weather_response.json)

          AQI=$(jq -r '.current.air_quality["us-epa-index"]' tmp/forecast_response.json)
          PM2_5=$(jq -r '.current.air_quality.pm2_5' tmp/forecast_response.json)
          PM10=$(jq -r '.current.air_quality.pm10' tmp/forecast_response.json)
          
          echo $TEXT $ICON $BNG_DAY_TEXT $BNG_NIT_TEXT $ISDAY
          sed -i "s#\[icon\]#$ICON#g" README.md
          sed -i "s#\[todays_condition\]#$TEXT#g" README.md
          if [ "$ISDAY" -eq "1" ]; then
              sed -i "s#\[todays_condition_in_bengali\]#$BNG_DAY_TEXT#g" README.md
          else
              sed -i "s#\[todays_condition_in_bengali\]#$BNG_NIT_TEXT#g" README.md
          fi
          sed -i "s#\[PM2_5\]#$PM2_5#g" README.md
          sed -i "s#\[PM10\]#$PM10#g" README.md

          case "$AQI" in
            1)
              AQI_VALUE="Good"
              ;;
            2)
              AQI_VALUE="Moderate"
              ;;
            3)
              AQI_VALUE="Unhealthy for sensitive group"
              ;;
            4)
              AQI_VALUE="Unhealthy"
              ;;
            5)
              AQI_VALUE="Very Unhealthy"
              ;;
            6)
              AQI_VALUE="Hazardous"
              ;;
            *)
              AQI_VALUE="Unknown"
              ;;
          esac
          sed -i "s#\[aqi\]#$AQI_VALUE#g" README.md

          # Generate header once
          HOURLY_MD="| Time | Condition | Temp (¬∞C) | Feels (¬∞C) | Humidity (%) | Wind (kph) | Rain (%) |\n"
          HOURLY_MD+="| --- | --- | --- | --- | --- | --- | --- |\n"

          # Extract only upcoming hours (time_epoch >= NOW_EPOCH)
          HOURLY_ROWS=$(jq -r --argjson now "$NOW_EPOCH" '
                      .forecast.forecastday[].hour
                      | map(select(.time_epoch >= $now))
                      | .[] | [
                .time,
                ("![](http:" + .condition.icon + ") " + .condition.text),
                .temp_c,
                .feelslike_c,
                .humidity,
                .wind_kph,
                .chance_of_rain
              ] | @tsv
          '  tmp/forecast_response.json|head -n 10)

          echo $HOURLY_MD
          echo $HOURLY_ROWS
          
          while IFS=$'\t' read -r t cond temp feel hum wind rain; do
            HOURLY_MD+="| $t | $cond | $temp | $feel | $hum | $wind | $rain |\n"
          done <<< "$HOURLY_ROWS"
          
          # Replace placeholder in README.md
          sed -i "s#\[hourly_forecast_table\]#${HOURLY_MD//$'\n'/\\n}#g" README.md

          LUNAR_PHASE=$(jq -r '.astronomy.astro.moon_phase' tmp/astronomy_response.json)
          MOONRISE=$(jq -r '.astronomy.astro.moonrise' tmp/astronomy_response.json)
          MOONSET=$(jq -r '.astronomy.astro.moonset' tmp/astronomy_response.json)
          SUNRISE=$(jq -r '.astronomy.astro.sunrise' tmp/astronomy_response.json)
          SUNSET=$(jq -r '.astronomy.astro.sunset' tmp/astronomy_response.json)
          WIND=$(jq -r '.current.wind_kph' tmp/current_weather_response.json)
          HUMIDITY=$(jq -r '.current.humidity' tmp/current_weather_response.json)
          FEELSLIKE=$(jq -r '.current.feelslike_c' tmp/current_weather_response.json)
          
          DASHBOARD="üåô <strong>Moon Phase:</strong> $LUNAR_PHASE (Rise: $MOONRISE, Set: $MOONSET)  <br>"
          DASHBOARD+="üåÖ <strong>Sunrise:</strong> $SUNRISE | <strong>Sunset:</strong> $SUNSET  <br>"
          DASHBOARD+="üí® <strong>Wind:</strong> $WIND kph  <br>"
          DASHBOARD+="üíß <strong>Humidity:</strong> $HUMIDITY%  <br>"
          DASHBOARD+="üå°Ô∏è <strong>Feels Like:</strong> $FEELSLIKE ¬∞C  \n"
          
          sed -i "s#\[weather_dashboard\]#${DASHBOARD//$'\n'/\\n}#g" README.md
        
      # Fetch data from your API
      - name: Fetch API data
        run: |
          curl -X GET https://naas.isalman.dev/no -o tmp/humour_response.json
          
      # Extract reason from the API response and update README
      - name: Update README with API reason
        run: |
          REASON=$(jq -r '.reason' tmp/humour_response.json)
          echo $REASON
          sed -i "s/\[funny_no_statement\]/$REASON/g" README.md
          
      - name: Get current year
        id: current_year
        run: echo "year=$(date +'%Y')" >> $GITHUB_ENV

      - name: Update README with current year
        run: |
          sed -i "s/\[current_year_placeholder\]/${{ env.year }}/g" README.md
          
      - name: Commit
        run: |
            if git diff --exit-code; then
              echo "No changes to commit."
              exit 0
            else
              git config user.name arnabnandy7
              git config user.email arnab_nandy7@yahoo.com
              git add .
              git commit -m "update"
              git push origin main
            fi
